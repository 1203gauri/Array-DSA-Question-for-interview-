#JAVA
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
      int m = nums1.length, n = nums2.length;
        
        // Ensure nums1 is the smaller array to minimize search space
        if (m > n) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int low = 0, high = m;
        int total = m + n;
        int half = (total + 1) / 2;

        while (low <= high) {
            int mid1 = (low + high) / 2;  // Partition index in nums1
            int mid2 = half - mid1;       // Partition index in nums2

            // Edge cases for out-of-bounds
            int left1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int right1 = (mid1 < m) ? nums1[mid1] : Integer.MAX_VALUE;
            int left2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            int right2 = (mid2 < n) ? nums2[mid2] : Integer.MAX_VALUE;

            // Correct partition found
            if (left1 <= right2 && left2 <= right1) {
                if (total % 2 == 0) {
                    return (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;
                } else {
                    return Math.max(left1, left2);
                }
            }

            // Adjust binary search range
            else if (left1 > right2) {
                high = mid1 - 1;  // Move left
            } else {
                low = mid1 + 1;   // Move right
            }
        }

        throw new IllegalArgumentException("Input arrays are not sorted.");  
    }
}
